//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HtmlAgilityPackWindowsFormsApp1.NLPIRService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="NLPIRService.IRootService")]
    public interface IRootService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/GetData", ReplyAction="urn:IRootService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/GetData", ReplyAction="urn:IRootService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getDatatable", ReplyAction="urn:IRootService/getDatatableResponse")]
        System.Data.DataTable getDatatable(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getDatatable", ReplyAction="urn:IRootService/getDatatableResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getDatatableAsync(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getDataString", ReplyAction="urn:IRootService/getDataStringResponse")]
        string getDataString(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getDataString", ReplyAction="urn:IRootService/getDataStringResponse")]
        System.Threading.Tasks.Task<string> getDataStringAsync(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/Execyu", ReplyAction="urn:IRootService/ExecyuResponse")]
        bool Execyu(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/Execyu", ReplyAction="urn:IRootService/ExecyuResponse")]
        System.Threading.Tasks.Task<bool> ExecyuAsync(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/participle", ReplyAction="urn:IRootService/participleResponse")]
        string participle(string sentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/participle", ReplyAction="urn:IRootService/participleResponse")]
        System.Threading.Tasks.Task<string> participleAsync(string sentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/AddWords", ReplyAction="urn:IRootService/AddWordsResponse")]
        bool AddWords(string jsonWords, string jsonCixings, string jsWeights);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/AddWords", ReplyAction="urn:IRootService/AddWordsResponse")]
        System.Threading.Tasks.Task<bool> AddWordsAsync(string jsonWords, string jsonCixings, string jsWeights);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/DelWords", ReplyAction="urn:IRootService/DelWordsResponse")]
        bool DelWords(string jsonContents);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/DelWords", ReplyAction="urn:IRootService/DelWordsResponse")]
        System.Threading.Tasks.Task<bool> DelWordsAsync(string jsonContents);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/AddSameWords", ReplyAction="urn:IRootService/AddSameWordsResponse")]
        bool AddSameWords(string jsonWords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/AddSameWords", ReplyAction="urn:IRootService/AddSameWordsResponse")]
        System.Threading.Tasks.Task<bool> AddSameWordsAsync(string jsonWords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/DelSameWords", ReplyAction="urn:IRootService/DelSameWordsResponse")]
        bool DelSameWords(string jsonWords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/DelSameWords", ReplyAction="urn:IRootService/DelSameWordsResponse")]
        System.Threading.Tasks.Task<bool> DelSameWordsAsync(string jsonWords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getSameWords", ReplyAction="urn:IRootService/getSameWordsResponse")]
        string getSameWords(string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getSameWords", ReplyAction="urn:IRootService/getSameWordsResponse")]
        System.Threading.Tasks.Task<string> getSameWordsAsync(string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getAllCustumWords", ReplyAction="urn:IRootService/getAllCustumWordsResponse")]
        string getAllCustumWords();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getAllCustumWords", ReplyAction="urn:IRootService/getAllCustumWordsResponse")]
        System.Threading.Tasks.Task<string> getAllCustumWordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getSummary", ReplyAction="urn:IRootService/getSummaryResponse")]
        string getSummary(string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getSummary", ReplyAction="urn:IRootService/getSummaryResponse")]
        System.Threading.Tasks.Task<string> getSummaryAsync(string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getSummaryE", ReplyAction="urn:IRootService/getSummaryEResponse")]
        string getSummaryE(string zhaiyao, string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getSummaryE", ReplyAction="urn:IRootService/getSummaryEResponse")]
        System.Threading.Tasks.Task<string> getSummaryEAsync(string zhaiyao, string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getNewWords", ReplyAction="urn:IRootService/getNewWordsResponse")]
        string getNewWords(string text, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getNewWords", ReplyAction="urn:IRootService/getNewWordsResponse")]
        System.Threading.Tasks.Task<string> getNewWordsAsync(string text, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getFileNewWords", ReplyAction="urn:IRootService/getFileNewWordsResponse")]
        string getFileNewWords(string textFile, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getFileNewWords", ReplyAction="urn:IRootService/getFileNewWordsResponse")]
        System.Threading.Tasks.Task<string> getFileNewWordsAsync(string textFile, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getKeyExtracts", ReplyAction="urn:IRootService/getKeyExtractsResponse")]
        string getKeyExtracts(string sLine, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getKeyExtracts", ReplyAction="urn:IRootService/getKeyExtractsResponse")]
        System.Threading.Tasks.Task<string> getKeyExtractsAsync(string sLine, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getFileKeyExtracts", ReplyAction="urn:IRootService/getFileKeyExtractsResponse")]
        string getFileKeyExtracts(string sFilename, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getFileKeyExtracts", ReplyAction="urn:IRootService/getFileKeyExtractsResponse")]
        System.Threading.Tasks.Task<string> getFileKeyExtractsAsync(string sFilename, int nMaxKeyLimit, bool bWeightOut);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/KeyExtract_ImportUserDict", ReplyAction="urn:IRootService/KeyExtract_ImportUserDictResponse")]
        int KeyExtract_ImportUserDict(string sFilename);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/KeyExtract_ImportUserDict", ReplyAction="urn:IRootService/KeyExtract_ImportUserDictResponse")]
        System.Threading.Tasks.Task<int> KeyExtract_ImportUserDictAsync(string sFilename);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/KeyExtract_ImportUserDict2", ReplyAction="urn:IRootService/KeyExtract_ImportUserDict2Response")]
        int KeyExtract_ImportUserDict2(string sFilename, bool bOverwrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/KeyExtract_ImportUserDict2", ReplyAction="urn:IRootService/KeyExtract_ImportUserDict2Response")]
        System.Threading.Tasks.Task<int> KeyExtract_ImportUserDict2Async(string sFilename, bool bOverwrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getclassifier_exec", ReplyAction="urn:IRootService/getclassifier_execResponse")]
        string getclassifier_exec(string sTitle, string sContent, int iType);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getclassifier_exec", ReplyAction="urn:IRootService/getclassifier_execResponse")]
        System.Threading.Tasks.Task<string> getclassifier_execAsync(string sTitle, string sContent, int iType);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getclassifier_detail", ReplyAction="urn:IRootService/getclassifier_detailResponse")]
        string getclassifier_detail(string classname);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IRootService/getclassifier_detail", ReplyAction="urn:IRootService/getclassifier_detailResponse")]
        System.Threading.Tasks.Task<string> getclassifier_detailAsync(string classname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRootServiceChannel : HtmlAgilityPackWindowsFormsApp1.NLPIRService.IRootService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RootServiceClient : System.ServiceModel.ClientBase<HtmlAgilityPackWindowsFormsApp1.NLPIRService.IRootService>, HtmlAgilityPackWindowsFormsApp1.NLPIRService.IRootService {
        
        public RootServiceClient() {
        }
        
        public RootServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RootServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RootServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RootServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Data.DataTable getDatatable(string sql) {
            return base.Channel.getDatatable(sql);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getDatatableAsync(string sql) {
            return base.Channel.getDatatableAsync(sql);
        }
        
        public string getDataString(string sql) {
            return base.Channel.getDataString(sql);
        }
        
        public System.Threading.Tasks.Task<string> getDataStringAsync(string sql) {
            return base.Channel.getDataStringAsync(sql);
        }
        
        public bool Execyu(string sql) {
            return base.Channel.Execyu(sql);
        }
        
        public System.Threading.Tasks.Task<bool> ExecyuAsync(string sql) {
            return base.Channel.ExecyuAsync(sql);
        }
        
        public string participle(string sentence) {
            return base.Channel.participle(sentence);
        }
        
        public System.Threading.Tasks.Task<string> participleAsync(string sentence) {
            return base.Channel.participleAsync(sentence);
        }
        
        public bool AddWords(string jsonWords, string jsonCixings, string jsWeights) {
            return base.Channel.AddWords(jsonWords, jsonCixings, jsWeights);
        }
        
        public System.Threading.Tasks.Task<bool> AddWordsAsync(string jsonWords, string jsonCixings, string jsWeights) {
            return base.Channel.AddWordsAsync(jsonWords, jsonCixings, jsWeights);
        }
        
        public bool DelWords(string jsonContents) {
            return base.Channel.DelWords(jsonContents);
        }
        
        public System.Threading.Tasks.Task<bool> DelWordsAsync(string jsonContents) {
            return base.Channel.DelWordsAsync(jsonContents);
        }
        
        public bool AddSameWords(string jsonWords) {
            return base.Channel.AddSameWords(jsonWords);
        }
        
        public System.Threading.Tasks.Task<bool> AddSameWordsAsync(string jsonWords) {
            return base.Channel.AddSameWordsAsync(jsonWords);
        }
        
        public bool DelSameWords(string jsonWords) {
            return base.Channel.DelSameWords(jsonWords);
        }
        
        public System.Threading.Tasks.Task<bool> DelSameWordsAsync(string jsonWords) {
            return base.Channel.DelSameWordsAsync(jsonWords);
        }
        
        public string getSameWords(string word) {
            return base.Channel.getSameWords(word);
        }
        
        public System.Threading.Tasks.Task<string> getSameWordsAsync(string word) {
            return base.Channel.getSameWordsAsync(word);
        }
        
        public string getAllCustumWords() {
            return base.Channel.getAllCustumWords();
        }
        
        public System.Threading.Tasks.Task<string> getAllCustumWordsAsync() {
            return base.Channel.getAllCustumWordsAsync();
        }
        
        public string getSummary(string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding) {
            return base.Channel.getSummary(contents, fSumRate, iSumLen, bHtmlTagRemove, nEncoding);
        }
        
        public System.Threading.Tasks.Task<string> getSummaryAsync(string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding) {
            return base.Channel.getSummaryAsync(contents, fSumRate, iSumLen, bHtmlTagRemove, nEncoding);
        }
        
        public string getSummaryE(string zhaiyao, string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding) {
            return base.Channel.getSummaryE(zhaiyao, contents, fSumRate, iSumLen, bHtmlTagRemove, nEncoding);
        }
        
        public System.Threading.Tasks.Task<string> getSummaryEAsync(string zhaiyao, string contents, float fSumRate, int iSumLen, bool bHtmlTagRemove, int nEncoding) {
            return base.Channel.getSummaryEAsync(zhaiyao, contents, fSumRate, iSumLen, bHtmlTagRemove, nEncoding);
        }
        
        public string getNewWords(string text, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getNewWords(text, nMaxKeyLimit, bWeightOut);
        }
        
        public System.Threading.Tasks.Task<string> getNewWordsAsync(string text, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getNewWordsAsync(text, nMaxKeyLimit, bWeightOut);
        }
        
        public string getFileNewWords(string textFile, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getFileNewWords(textFile, nMaxKeyLimit, bWeightOut);
        }
        
        public System.Threading.Tasks.Task<string> getFileNewWordsAsync(string textFile, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getFileNewWordsAsync(textFile, nMaxKeyLimit, bWeightOut);
        }
        
        public string getKeyExtracts(string sLine, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getKeyExtracts(sLine, nMaxKeyLimit, bWeightOut);
        }
        
        public System.Threading.Tasks.Task<string> getKeyExtractsAsync(string sLine, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getKeyExtractsAsync(sLine, nMaxKeyLimit, bWeightOut);
        }
        
        public string getFileKeyExtracts(string sFilename, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getFileKeyExtracts(sFilename, nMaxKeyLimit, bWeightOut);
        }
        
        public System.Threading.Tasks.Task<string> getFileKeyExtractsAsync(string sFilename, int nMaxKeyLimit, bool bWeightOut) {
            return base.Channel.getFileKeyExtractsAsync(sFilename, nMaxKeyLimit, bWeightOut);
        }
        
        public int KeyExtract_ImportUserDict(string sFilename) {
            return base.Channel.KeyExtract_ImportUserDict(sFilename);
        }
        
        public System.Threading.Tasks.Task<int> KeyExtract_ImportUserDictAsync(string sFilename) {
            return base.Channel.KeyExtract_ImportUserDictAsync(sFilename);
        }
        
        public int KeyExtract_ImportUserDict2(string sFilename, bool bOverwrite) {
            return base.Channel.KeyExtract_ImportUserDict2(sFilename, bOverwrite);
        }
        
        public System.Threading.Tasks.Task<int> KeyExtract_ImportUserDict2Async(string sFilename, bool bOverwrite) {
            return base.Channel.KeyExtract_ImportUserDict2Async(sFilename, bOverwrite);
        }
        
        public string getclassifier_exec(string sTitle, string sContent, int iType) {
            return base.Channel.getclassifier_exec(sTitle, sContent, iType);
        }
        
        public System.Threading.Tasks.Task<string> getclassifier_execAsync(string sTitle, string sContent, int iType) {
            return base.Channel.getclassifier_execAsync(sTitle, sContent, iType);
        }
        
        public string getclassifier_detail(string classname) {
            return base.Channel.getclassifier_detail(classname);
        }
        
        public System.Threading.Tasks.Task<string> getclassifier_detailAsync(string classname) {
            return base.Channel.getclassifier_detailAsync(classname);
        }
    }
}
